//FORMIK AND YUP
import { useFormik } from "formik";
import * as yup from "yup";
//REACT
import { useState } from "react";
//Axios
import axios from "axios";
//DEPENDENCIES
import { setUser } from "../../redux/reducers/userLogin/userLoginSlice";

//MATERIAL UI
import {
  Card,
  Alert,
  CardContent,
  Button,
  TextField,
  Typography,
} from "@mui/material";
import { useRouter } from "next/router";
import { useDispatch } from "react-redux";
import Head from "next/head";
import Spinner from "../pure/spinner";

export default function LoginForm() {
  //redux
  const dispatch = useDispatch();

  //states
  const [creationSuccess, setCreationSuccess] = useState(false);
  const [found, setFound] = useState(false);
  const [apiMessage, setApiMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  //Initial values for formik form
  const initialValues = {
    u_username: "",
    u_password: "",
  };
  const router = useRouter();

  //VALIDATION SCHEMA
  const validationSchema = yup.object().shape({
    u_username: yup
      .string("Escribe el nombre de usuario")
      .required("El nombre de usuario es requerido"),
    u_password: yup
      .string("Escribe una contraseña")
      .required("La contraseña es no puede estar vacía"),
  });

  //BUILD FORMIK
  const formik = useFormik({
    initialValues: initialValues,
    validationSchema,
    onSubmit: (values) => {
      setIsLoading(true);
      const options = {
        method: "POST",
        url: `${process.env.NEXT_PUBLIC_URI_ENDPOINT}/qrstock/api/users/login`,
        data: {
          u_username: values.u_username,
          u_password: values.u_password,
        },
      };
      axios
        .request(options)
        .then(function (response) {
          const { data } = response;
          //sessionStorage.setItem("user", "logeado");

          const userloged = data.userFound;

          localStorage.setItem("user", `${userloged.u_type}`);
          setApiMessage(data.message);
          setCreationSuccess(!creationSuccess);
          dispatch(
            setUser({
              id: userloged.id,
              u_firstname: userloged.u_firstname,
              u_lastname: userloged.u_lastname,
              u_username: userloged.u_username,
              u_password: userloged.u_password,
              u_admin: userloged.u_admin,
              isdeleted: userloged.isdeleted,
              u_type: userloged.u_type,
            })
          );
        })
        .catch(function (error) {
          if (error.response) {
            setFound(error.response.data.userNotFound);
            setApiMessage(error.response.data.message);
            router.push("/");
          } else {
            setFound(true);
            setApiMessage("Error al conectarse al servidor");
          }
        })
        .finally(() => {
          values.u_username = "";
          values.u_password = "";
          router.push("/");
          setIsLoading(false);
          setTimeout(() => {
            setFound(false);
            setCreationSuccess(false);
          }, 5000);
        });
    },
    onReset: () => {},
  });

  return (
    <>
      <Head>
        <title>SystemQr</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Card
        sx={{
          bgcolor: "#fff",
          mt: 20,
          width: "60vw",
          marginLeft: "auto",
          marginRight: "auto",
        }}
      >
        <CardContent>
          <div>
            <div>
              <Typography variant="h5" style={{ textAlign: "center" }}>
                Iniciar Sesion
              </Typography>
            </div>

            <form
              onSubmit={formik.handleSubmit}
              onReset={formik.handleReset}
              className=" d-flex justify-content-center align-item-center"
            >
              <div style={{ width: "50vw" }}>
                <TextField
                  sx={{ mt: 4, width: "100%" }}
                  variant="outlined"
                  fullWidth
                  id="u_username"
                  name="u_username"
                  label="Nombre de usuario"
                  type="text"
                  value={formik.values.u_username}
                  onChange={formik.handleChange}
                  error={
                    formik.touched.u_username &&
                    Boolean(formik.errors.u_username)
                  }
                  helperText={
                    formik.touched.u_username && formik.errors.u_username
                  }
                />
                <br />
                <TextField
                  sx={{ mt: 4, width: "100%" }}
                  variant="outlined"
                  id="u_password"
                  name="u_password"
                  label="Contraseña"
                  type="password"
                  value={formik.values.u_password}
                  onChange={formik.handleChange}
                  className="mb-4"
                  error={
                    formik.touched.u_password &&
                    Boolean(formik.errors.u_password)
                  }
                  helperText={
                    formik.touched.u_password && formik.errors.u_password
                  }
                />
                <br />
                <div className="d-flex justify-content-center mt-4 ">
                  <Button
                    type="submit"
                    size="large"
                    variant="contained"
                    sx={{ mr: 2 }}
                  >
                    Iniciar Sesion
                  </Button>
                  <Button
                    type="reset"
                    size="large"
                    variant="outlined"
                    sx={{ ml: 0 }}
                  >
                    Cancelar
                  </Button>
                </div>
                {isLoading ? (
                  <div className="mt-4">
                    <Spinner />
                  </div>
                ) : null}
                <div className="mt-4">
                  {creationSuccess ? (
                    <Alert severity="success" variant="standard">
                      {apiMessage}
                    </Alert>
                  ) : null}
                  {found ? (
                    <Alert severity="error" variant="standard">
                      {apiMessage}
                    </Alert>
                  ) : null}
                </div>
              </div>
            </form>
          </div>
        </CardContent>
      </Card>
    </>
  );
}
